<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2011 Michael R. Lange <michael.r.lange@langmi.de>.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
 -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd">

    <description>
        Spring Batch example for a MultiResourcePartitioner Question at Stackoverflow
        http://stackoverflow.com/questions/7953550/multiresourceparitioner-in-spring-batch-to-accept-files-from-multiple-folders
        
        - filters resources according to specific filter argument
        - uses factory to create resources array
        - basically reads file and writes each line out unchanged
        - writer does nothing but logging
        - expects an input file, see http://static.springsource.org/spring-batch/apidocs/org/springframework/batch/item/file/FlatFileItemReader.html#setStrict(boolean)
        - uses http://static.springsource.org/spring-batch/apidocs/org/springframework/batch/item/file/mapping/PassThroughLineMapper.html
        
        see:
            - http://static.springsource.org/spring-batch/reference/html-single/index.html#flatFileItemReader
            - http://static.springsource.org/spring-batch/apidocs/org/springframework/batch/item/file/FlatFileItemReader.html
    </description>
    <!-- 
        inline xmlns, otherwise it would look like 
        'batch:job, batch:step, etc.' 
    -->
    <job id="multiResourcePartitionerJob" xmlns="http://www.springframework.org/schema/batch">        
        <step id="businessStep" 
              parent="businessStep:master" />
    </job>

    <step id="concreteBusinessStep" xmlns="http://www.springframework.org/schema/batch">
        <tasklet>
            <chunk reader="itemReader" 
                   writer="itemWriter" 
                   commit-interval="5" />
        </tasklet>
    </step>

    <bean name="businessStep:master" class="org.springframework.batch.core.partition.support.PartitionStep">
        <description>
            * concurrencyLimit matches count of read files to force multi-threading
        </description>
        <property name="jobRepository" ref="jobRepository"/>
        <property name="stepExecutionSplitter">
            <bean class="org.springframework.batch.core.partition.support.SimpleStepExecutionSplitter">
                <constructor-arg ref="jobRepository"/>
                <constructor-arg ref="concreteBusinessStep"/>
                <constructor-arg>                    
                    <bean class="org.springframework.batch.core.partition.support.MultiResourcePartitioner" scope="step">
                        <property name="resources" ref="resources" />
                    </bean>
                </constructor-arg>
            </bean>
        </property> 
        <property name="partitionHandler">
            <bean class="org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler">
                <property name="taskExecutor">
                    <bean class="org.springframework.core.task.SimpleAsyncTaskExecutor">
                        <property name="concurrencyLimit" value="2" />
                    </bean>
                </property>
                <property name="step" ref="concreteBusinessStep"/>
            </bean>
        </property>
    </bean>

    <bean id="itemReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
        <description>
            * resource is set via step scoped late binding (see multiresourcereader)
            * strict mode - we expect input files
        </description>
        <property name="resource" value="#{stepExecutionContext['fileName']}" />
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.PassThroughLineMapper" />
        </property>
        <property name="strict" value="true" />
    </bean>
    
    <bean id="itemWriter" class="de.langmi.spring.batch.examples.playground.SimpleItemWriter" />

    <bean id="resources" class="de.langmi.spring.batch.examples.playground.file.resource.FiltersFoldersResourceFactory" factory-method="getInstance">
        <constructor-arg name="filePath" type="java.lang.String" value="${filePath}" />
        <constructor-arg name="acceptedFolders" type="java.util.List" value="${acceptedFolders}" />
    </bean>

    <!-- Placeholderconfigurer for file properties. -->
    <bean id="placeholderProperties" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:spring/batch/job/file-multiresourcepartitioner-filter-folders.properties" />
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
        <property name="ignoreUnresolvablePlaceholders" value="true" />
        <property name="order" value="1" />
    </bean>
</beans>
